'use strict';

import React, {
    Component
} from 'react';

import {
    StyleSheet,
    View,
    Text,
    TouchableOpacity,
    Dimensions,
    TouchableWithoutFeedback,
    DeviceEventEmitter
} from 'react-native';

export const hairlineWidth = StyleSheet.hairlineWidth;

const screen = Dimensions.get('window');

class Tabs extends Component {
    onSelect(el) {
        DeviceEventEmitter.emit('clickBottomTab', el.props.tabIndex);
        if (el.props.onSelect) {
            el.props.onSelect(el);
        } else if (this.props.onSelect) {
            this.props.onSelect(el);
        }
    }

    render() {

        const self = this;
        let selected = this.props.selected
        if (!selected) {
            React.Children.forEach(this.props.children.filter(c => c), el => {
                if (!selected || el.props.initial) {
                    selected = el.props.name || el.key;
                }
            });
        }

        return (
            <View style={{ flex: 0 }}>
                {/* <View style ={{height:hairlineWidth,width:screen.width,backgroundColor:'#ccd6dd'}}/> */}
                <View style={[styles.tabbarView, this.props.style]} >
                    {React.Children.map(this.props.children.filter(c => c), (el) =>
                        <TouchableOpacity key={el.props.name + "touch"}
                            style={[styles.iconView, this.props.iconStyle, (el.props.name || el.key) == selected ? this.props.selectedIconStyle || el.props.selectedIconStyle || {} : {}]}
                            onPress={() => !self.props.locked && self.onSelect(el)}
                            onLongPress={() => self.onSelect(el)}
                            activeOpacity={1}>
                            {selected == (el.props.name || el.key) ? React.cloneElement(el, { selected: true, style: [el.props.style, this.props.selectedStyle, el.props.selectedStyle] }) : el}
                        </TouchableOpacity>
                    )}
                </View>
            </View>
        );
    }
}
var styles = StyleSheet.create({
    tabbarView: {
        width: screen.width,
        height: 50,
        opacity: 1,
        backgroundColor: 'transparent',
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        shadowOffset: { width: 0, height: -2.5 },
        shadowOpacity: 0.03,
        shadowColor: '#25265E',
        shadowRadius: 1
    },
    iconView: {
        flex: 1,
        height: 50,
        justifyContent: 'center',
        alignItems: 'center',
    }
});

module.exports = Tabs;
